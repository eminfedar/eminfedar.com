{"componentChunkName":"component---src-templates-blog-post-js","path":"/0-dan-ram-1-ram-nedir","result":{"data":{"markdownRemark":{"html":"<h2>Merhabalar!</h2>\n<p><strong>(0 → RAM)*</strong> *serisinde sizlerle beraber <strong>sıfırdan</strong> kendi <strong>RAM</strong>’imizi tasarlayacağız. Bu yazıda tasarıma hemen geçmesek de genel bir bilgi edinmek için okumanız faydalı olacaktır. Başarılar!</p>\n<h3>Ram Nedir?</h3>\n<p><strong>R</strong>andom <strong>A</strong>ccess <strong>M</strong>emory, yani Rastgele Erişimli Bellek.</p>\n<p>“Rastgele Erişimli” denilmesinin sebebi bellekteki hafıza bölümlerine “kaotik” veya “neresi rast gelirse” şeklinde erişmemiz değil.</p>\n<p>İstediğimiz (yani herhangi bir, yani rastgele), hafıza bölümüne <strong>tek seferde</strong> erişebildiğimiz için böyle tesmiye edilmiş.</p>\n<p><img src=\"./rastgele-sirali.gif\" alt=\"Bellekteki bir adrese erişim türü farkları [ Rastgele | Sıralı ]\"><em>Bellekteki bir adrese erişim türü farkları [ Rastgele | Sıralı ]</em></p>\n<h3>Ram Ne İşe Yarar?</h3>\n<p>İşlemcimizin en çok konuştuğu donanımlardan biri olan RAM, işlemciye lazım olacak <strong>veriler ve komutları</strong> geçici olarak saklayan ve istenildiğinde de tekrar okumamızı sağlayan bir elektronik devredir.</p>\n<p>Mesela bilgisayarınızda bir program çalıştırdığınız zaman bu program <strong>kalıcı ve yavaş</strong> bellekten okunarak (yani sabit diskinizden) <strong>geçici ve hızlı</strong> (yani RAM) belleğe aktarılır. Daha sonra İşlemci bu programın RAM’de tutulan komutlarını tek tek okuyup çalıştırmaya başlar.</p>\n<blockquote>\n<p>Mesela a ile b’yi topla, RAM’de diğer bir adrese şu veriyi yaz, şu adresteki veriyi 1 arttır gibi komutlar…</p>\n</blockquote>\n<p>İşlemcinin programları sabit diskinizden okuyup çalıştırmama sebebi okuma-yazma hızının çok düşük olmasıdır.</p>\n<blockquote>\n<p>Örneğin ortalama bir <strong>RAM</strong> 15–20GB/s okuma-yazma hızına sahipken, ortalama bir <strong>SSD</strong> 0.4–0.5GB/s hızlarında. ortalama bir <strong>HDD</strong> ise 0.02–0.03GB/s.</p>\n</blockquote>\n<p>Eğer sabit diskten çalıştırsa idi işlemci çok hızlı olmasına rağmen sabit diski sürekli beklemek zorunda kalacaktı, böylece zaman kaybı had safhada olacaktı.</p>\n<h3>“RAM’i anladım, fakat bir veri elektrik ile nasıl saklanabilir ki? Sabit disk üzerindeki kabartılar ile veriyi kolayca saklayabiliyor. Elektrik nasıl saklanır?”</h3>\n<p>Elektrik tek başına saklanabilen bir şey değil evet, ama basit devreler yardımıyla elektriği saklayabiliyoruz.</p>\n<p>Mesela “veri saklama” dediğimiz işini gerçekleştirebilen en basit devrelerden biri <strong>AND-OR Latche</strong> yani <strong>Ve-Veya Mandalı</strong>’dır.</p>\n<p>Bu ismin verilme sebebi sadece 1 VE ve 1 VEYA kapısıyla oluşturulabilmesidir. <em>(bir tane de DEĞİL kapısı var aşağıda tabiki :))</em></p>\n<p><img src=\"./andor-latche.gif\" alt=\"1 bit veri saklayabilen AND-OR-Latche çalışma şekli\"><em>1 bit veri saklayabilen AND-OR-Latche çalışma şekli</em></p>\n<p>Bu devreyi Mantık Devreleri (veya Elektrik Devreleri) tasarlama programları aracılığıyla kendiniz de tasarlayıp simüle edebilirsiniz. Ayrıca ilerideki tasarımlarımızı da kendi bilgisayarınızda gerçeklemek için bu programlara ihtiyacınız olacak.</p>\n<p>Kullanabileceğiniz zordan kolaya sıralı bazı bedava programlar:</p>\n<ul>\n<li><strong>Logisim</strong> (<a href=\"https://sourceforge.net/projects/circuit/\">https://sourceforge.net/projects/circuit/</a>)\n*(Kapsamlılık: 15, Zorluk: 2) <strong><em>kullandığım</em></strong></li>\n<li><strong>Logic Circuit</strong> (<a href=\"https://logiccircuit.org/\">https://logiccircuit.org/</a>)\n<em>(Kapsamlılık: 10, Zorluk: 4)</em></li>\n<li><strong>Logic Circuit Designer</strong> (<a href=\"https://sourceforge.net/projects/logiccircuitd/\">https://sourceforge.net/projects/logiccircuitd/</a>)\n<em>(Kapsamlılık: 7, Zorluk: 2)</em></li>\n<li><strong>Multimedia Logic</strong> (<a href=\"https://sourceforge.net/projects/multimedialogic/\">https://sourceforge.net/projects/multimedialogic/</a>)\n<em>(Kapsamlılık: 4, Zorluk: 1)</em></li>\n</ul>\n<p>Bu devreyi nasıl oluşturacağımız, kapıların nasıl çalıştığı, doğruluk tabloları, karnaugh haritaları gibi teknik meselelere artık başlayabiliriz sanırım.</p>\n<p>Şimdilik bu kadar :)</p>\n<p>Bir sonraki yazımız olan <strong><a href=\"0-dan-ram-2-mantik-kapilari\">0 → RAM | 2) Mantık Kapıları</a></strong>'ında görüşmek üzere!</p>","frontmatter":{"date":"Mart 02, 2020","image":"static/img/ram/kapak-ram1.png","path":"/0-dan-ram-1-ram-nedir","tags":["RAM"],"title":"0 → RAM | 1) RAM Nedir?"}}},"pageContext":{"slug":"/0-dan-ram-1-ram-nedir","previous":{"excerpt":"Bismillâh her hayrın başıdır. Biz dahi başta ona başlarız. Bil ey nefsim! Şu mübârek kelime İslâm nişanı olduğu gibi, bütün mevcudâtın lisân-ı haliyle vird-i zebânıdır. ... İşte, ey mağrur nefsim, sen…","html":"<p><strong>Bismillâh</strong> her hayrın başıdır. Biz dahi başta ona başlarız.</p>\n<p>Bil ey nefsim!</p>\n<p>Şu mübârek kelime <strong>İslâm nişanı</strong> olduğu gibi, bütün mevcudâtın lisân-ı haliyle vird-i zebânıdır.</p>\n<p>...</p>\n<p>İşte, ey mağrur nefsim, sen o seyyahsın. Şu dünya ise bir çöldür. Aczin ve fakrın hadsizdir. Düşmanın, hâcâtın nihayetsizdir. Mâdem öyledir, şu sahrânın Mâlik-i Ebedîsi ve Hâkim-i Ezelîsinin ismini al. Tâ bütün kâinatın dilenciliğinden ve her hâdisâtın karşısında titremeden kurtulasın.</p>\n<p>...</p>\n<p>Ey nefis! Böyle ebleh olmamak istersen; Allah nâmına ver, Allah nâmına al, Allah nâmına başla, Allah nâmına işle, vesselâm...</p>\n<p>| Birinci Söz, Sözler, Risale-i Nur</p>","id":"3765eac9-1f3a-508c-aa3c-bb01b3ab82c8","frontmatter":{"date":"Mart 01, 2020","description":"Bismillah her hayrın başıdır.","image":"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/fa6c3540-92bb-4f6c-9fa7-7c78f7c4eebf/d40jn8g-6211b31e-8326-4a98-9aa9-f9b83e657a32.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcL2ZhNmMzNTQwLTkyYmItNGY2Yy05ZmE3LTdjNzhmN2M0ZWViZlwvZDQwam44Zy02MjExYjMxZS04MzI2LTRhOTgtOWFhOS1mOWI4M2U2NTdhMzIuanBnIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.Wpgx9vPJ2tUWkBVyZ0IIUseByEqeqFfg1yLMGkuiMXM","path":"/bismillah","tags":["Genel"],"templateKey":"blog-post","title":"Bismillah"}},"next":{"excerpt":"Merhabalar! Bu derste mantıksal elektronik devreleri kurmak için olmazsa olmazımız olan Mantık Kapılarına göz atacağız. Mantığın kapısı mı olur? Mantık ilmi, bizim günlük hayatta karar verirken…","html":"<h2>Merhabalar!</h2>\n<p>Bu derste mantıksal elektronik devreleri kurmak için olmazsa olmazımız olan Mantık Kapılarına göz atacağız.</p>\n<h3>Mantığın kapısı mı olur?</h3>\n<p>Mantık ilmi, bizim günlük hayatta <strong>karar</strong> verirken beynimiz ile yaptığımız işlemleri matematiğe uyarlayan bir ilim. Bu ilim pek çok devasa ilim dalının temellerini oluşturuyor.</p>\n<p>Bugün bilgisayarda yaptığımız işlerin büyük çoğunluğu mantıksal çıkarımlar sayesinde olmakta.</p>\n<blockquote>\n<p>Mesela bu yazıyı beğenmek için beğen butonuna tıklamak. Bilgisayar sizin başka bir yere değil de özel olarak o butona tıkladığınızı nasıl anlar ki?</p>\n</blockquote>\n<p><strong>İşte burada mantık ilmi devreye girer.</strong> Kendi aklımızla bir butona tıklama işini nasıl tahayyül ediyorsak onu formülize edip bilgisayarın da aynı şeyi algılamasını sağlayabiliriz.</p>\n<p>Matematikte kullanılan mantıksal işaretler:</p>\n<ul>\n<li><strong>Λ</strong> | <strong>.</strong> | <strong>x</strong> = Ve</li>\n<li><strong>V</strong> | <strong>+</strong> = Veya</li>\n<li><strong>‘</strong> = Değil</li>\n<li><strong>⇒</strong> = İse</li>\n<li>⇔ = Çift yönlü ise (Ancak ve ancak)</li>\n</ul>\n<h3>Bir mantıksal işlem örneği yapalım:</h3>\n<p>Mesela benim aklım o butona basabilmek için 2 şart koşuyor:</p>\n<ol>\n<li>Ekrandaki imleç butonun üzerinde olmalı</li>\n<li>Elimdeki farenin sol tuşuna basmalıyım</li>\n</ol>\n<p>Bu işlemi matematiksel mantık ile yazmak istersek basitçe şöyle yazabiliriz:</p>\n<blockquote>\n<p>A: İmlecin buton üzerinde olması\nB: Farenin sol tuşuna basılması\nButonun tıklanmasına ise C diyelim.\nC, A ve B aynı anda sağlandığında doğru olur. Yani:</p>\n</blockquote>\n<p>C = A ve B</p>\n<p>veya matematiksel olarak ifade edersek.</p>\n<p>C = A Λ B <br>\nC = A.B</p>\n<p>Bu işlemi biraz daha açarsak, A işlemi aslında imlecin koordinatları ile butonun koordinatları arasında bir hesaptan ibaret. Öyleyse şöyle yazabiliriz:</p>\n<p><em>(buradaki b.y b.x gibi '.' kullanımı butonun y,x gibi özelliklerine erişme manasında kullanılmıştır.)</em></p>\n<p><strong>b:</strong> Buton <br>\n<strong>f:</strong> Fare <br>\n<strong>A:</strong> (f.x ≥ b.x) Λ (f.x &#x3C; (b.x + b.genişlik)) Λ (f.y ≥ b.y) Λ (f.y &#x3C; (b.y + b.yükseklik)) <br>\n<strong>B:</strong> f.SolTuşuTıklandıMı <br></p>\n<blockquote>\n<p>Bugün neredeyse bütün tıklanma kontrolleri ve basit çarpışma kontrolü A ve B formülünün 1 veya 0 sonuçlanmasına göre kontrol edilmekte.</p>\n</blockquote>\n<p>Koşullarımızı detaylandırdıysak artık <strong>C = A Λ B</strong> <em>(veya A.B, biz genelde yaygın olan nokta (.) gösterimini kullanacağız)</em> bize butonun tıklanıp tıklanmadığını veren mantıksal formül oldu.</p>\n<h3>Birkaç basit sözlü ifadeyi mantıksal ifadeye çevirelim:</h3>\n<p>“A butonuna basılır ve B butonuna basılmaz ise C koşulu doğrudur”:</p>\n<blockquote>\n<p>C = A.B’</p>\n</blockquote>\n<p>“T düğmesi veya J düğmesine basılırsa K kliması açılsın”:</p>\n<blockquote>\n<p>K = T+J</p>\n</blockquote>\n<p>“O ve P tuşları basılmıyor **veya **O ve P tuşları aynı anda basılıyor ise U koşulu doğrudur”:</p>\n<blockquote>\n<p>U = (O’.P’) + (O.P)</p>\n</blockquote>\n<p>U = (O+P)’ + (O.P) şeklinde de yazılabilir. — “O veya P basılıyor değilse”</p>\n<p>Gördüğünüz gibi mantıksal ifadeler oluşturmak gayet kolay :)</p>\n<p>Mantıksal ifadeler hakkında daha fazla bilgiyi ve bazı matematiksel kuramları <em>(De Morgan Kuralları gibi)</em> pek çok internet sayfasında ve YouTube kanallarında bulabilirsiniz.</p>\n<h3>Mantık güzel, peki “Kapıları” nedir?</h3>\n<p><strong>Mantık Kapıları</strong> yukarıda sadece kağıt üzerinde ifade ettiğimiz mantıksal ifadeleri gerçek hayatta donanımsal olarak gerçekleştirmemize olanak sağlayan elektronik devre elemanlarıdır.</p>\n<blockquote>\n<p>Örneğin bir kumandada iki butona birden basıldığında bir cihazın çalışması</p>\n</blockquote>\n<p>Elektronikte\n“VE kapısı” dediğimiz şey Mantıktaki <strong>Ve (Λ)</strong>’nin,\n“VEYA” kapısı da <strong>Veya (V)</strong>’nın karşılığıdır.</p>\n<p><img src=\"static/img/ram/mantik-kapilari-hepsi.gif\" alt=\"Mantık kapılarının tümü\"></p>\n<p>Çalışma şekilleri yukarıdaki gibi verilmiş kapıların matematiksel olarak da karşılıklarını bilmek isteriz. Çünkü her zaman ezbere iş yapamayız veya ilgilenen ifade git gide karmaşıklaşıp büyüyebilir.</p>\n<p>Bu yüzden <strong>Doğruluk Tablolarını</strong> kullanırız. Doğruluk tabloları bir <strong>elemanın</strong> veya bir <strong>ifadenin</strong> tüm giriş kombinasyonları için çıkışlarını gösterdiğimiz bir tablodan ibaret. Çok basit fakat çok yararlı.</p>\n<h3>Birkaç Doğruluk Tablosu örneği:</h3>\n<p>Mesela A ve B girişlerimiz olsun, bunlardan <strong>sadece bir tanesi</strong> 1 olduğu zaman doğru olan sonuçla Doğruluk Tablosunu çizelim:</p>\n<p><img src=\"static/img/ram/xor-tablo.png\" alt=\"XOR Doğruluk Tablosu\"></p>\n<p>Bu gördüğümüz tablo aslında <strong>Özel VEYA</strong>(XOR veya EXOR) kapısının doğruluk tablosudur.</p>\n<p><strong>Özel VEYA</strong> da örnek ile aynı şeyi gerçekleştirmekte. (yani Farklıysa 1, aynısya 0)</p>\n<p>Elinizdeki duruma göre istediğiniz girişlerde istediğiniz şekilde sonuçlar çıkaran doğruluk tabloları çizebilirsiniz.</p>\n<blockquote>\n<p>Matematiksel olarak ifade edilebilen her doğruluk tablosu gerçeğe dönüştürülebilir.\nBu yüzden bir olayı <strong>doğruluk tablosuna</strong> dökebilmek, onu elektronik ortama aktarabilmek demektir.</p>\n</blockquote>\n<p>Mesela yine A ve B girişlerimiz olsun, fakat şimdi sadece A da B de 1 olduğu zaman sonuç doğru olsun:</p>\n<p><img src=\"static/img/ram/and-tablo.png\" alt=\"AND Doğruluk Tablosu\"></p>\n<p>Bu gördüğümüz tablo da aslında <strong>VE</strong> (AND) kapısının doğruluk tablosudur.</p>\n<p><strong>VE</strong> kapısı sadece iki giriş de <strong>1</strong> olduğu, yani elektrik geldiği zaman 1 olur, sonuç olarak o da elektrik verir.</p>\n<p>Doğruluk Tabloları küçük boyutlarda işimize yarıyor, fakat örneğin elimizde 5 tane durum var ise ne yapacağız? <em>(Bunun için 32 satırlık bir doğruluk tablosu yapmamız gerekir :))</em></p>\n<p><strong>Böyle durumlarda Karnaugh Haritaları kullanırız.</strong> Karnaugh Haritaları doğruluk tablosunun iki boyutlu düzleme dökülmüş halidir. Yani durumlar tek bir sütun kaplamak yerine satır ve sütunlara dağıtılırlar.</p>\n<p><img src=\"static/img/ram/karna1.png\" alt=\"4 Duruma sahip basit bir karnaugh haritası. (Boş alanlar 0)\"><br>\n<em>4 Duruma sahip basit bir karnaugh haritası. (Boş alanlar 0)</em></p>\n<p>Karnaugh Haritalarının bir diğer bir avantajı ise işlemi sadeleştirmenin çok kolay yapılabilmesidir.</p>\n<p>Örneğin biz A ve B’nin sadece 11'de 1 ürettiğini gördüğümüz için kolayca bu tablo tek bir <strong>VE</strong> kapısıyla gerçeklenebilir diyebildik.</p>\n<p><strong>Fakat durum sayısı arttıkça birden fazla kapı gerekebilir. Ve bu durum işlem sadeleştirilmesi yapılmaz ise gereksiz kapı kullanımıyla sonuçlanabilir.</strong></p>\n<p><strong>Bu da daha fazla Masraf+ Boyut + Enerji harcaması demek.</strong></p>\n<blockquote>\n<p>İleride 1 bit veri saklama için kullanacağımız VE-VEYA Mandalı devresi Karnaugh Haritası ile yapılan sadeleştirme ile sadece 3 tane kapıdan oluşmakta.)</p>\n</blockquote>\n<p><strong>Mantık Kapıları</strong> ve <strong>Doğruluk Tablosu</strong>’nu hallettiğimize göre bu yazıyı bitirebiliriz.</p>\n<p>Bir sonraki yazımız olan <a href=\"0-dan-ram-3-karnaugh-haritalari\"><strong>0 → RAM | 3) Karnaugh Haritaları</strong></a>'nda görüşmek üzere!</p>","id":"a43c7591-3fab-5cce-bce4-23d319b757e7","frontmatter":{"date":"Mart 03, 2020","description":"İleride sıkça kullanacağımız mantık kapılarına bir el atalım.","image":"static/img/ram/kapak-ram2.png","path":"/0-dan-ram-2-mantik-kapilari","tags":["RAM"],"templateKey":"blog-post","title":"0 → RAM | 2) Mantık Kapıları"}}}}}